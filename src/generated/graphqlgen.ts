// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Law } from "./prisma-client";
import { Context } from "../types";

type JusticeSystemEnum = "DK" | "ECHR" | "EU";
type LanguageEnum = "DA" | "EN";
type LawType =
  | "ANORDNING"
  | "BEKENDTGOERELSE"
  | "CIRKULAERE"
  | "CIRKULAERESKRIVELSE"
  | "IKRAFTTRAEDELSESBEKENDTGOERELSE"
  | "LOV"
  | "LOVBEKENDTGOERELSE"
  | "AENDRINGSLOV"
  | "VEJLEDNING";
type LawOrderByInput =
  | "altTitle_ASC"
  | "altTitle_DESC"
  | "altSlug_ASC"
  | "altSlug_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "historic_ASC"
  | "historic_DESC"
  | "id_ASC"
  | "id_DESC"
  | "indexedAt_ASC"
  | "indexedAt_DESC"
  | "isSearchable_ASC"
  | "isSearchable_DESC"
  | "justiceSystem_ASC"
  | "justiceSystem_DESC"
  | "language_ASC"
  | "language_DESC"
  | "lawType_ASC"
  | "lawType_DESC"
  | "linkedAt_ASC"
  | "linkedAt_DESC"
  | "ministry_ASC"
  | "ministry_DESC"
  | "permalink_ASC"
  | "permalink_DESC"
  | "publicationDate_ASC"
  | "publicationDate_DESC"
  | "published_ASC"
  | "published_DESC"
  | "scrapedAt_ASC"
  | "scrapedAt_DESC"
  | "shortName_ASC"
  | "shortName_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "title_ASC"
  | "title_DESC"
  | "uid_ASC"
  | "uid_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "url_ASC"
  | "url_DESC";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export type LawsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Law[] | Promise<Law[]>;

  export interface Type {
    laws: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Law[] | Promise<Law[]>;
  }
}

export namespace LawResolvers {
  export const defaultResolvers = {
    altTitle: (parent: Law) =>
      parent.altTitle === undefined ? null : parent.altTitle,
    altSlug: (parent: Law) =>
      parent.altSlug === undefined ? null : parent.altSlug,
    createdAt: (parent: Law) => parent.createdAt,
    historic: (parent: Law) => parent.historic,
    id: (parent: Law) => parent.id,
    indexedAt: (parent: Law) =>
      parent.indexedAt === undefined ? null : parent.indexedAt,
    isSearchable: (parent: Law) => parent.isSearchable,
    justiceSystem: (parent: Law) => parent.justiceSystem,
    language: (parent: Law) => parent.language,
    lawType: (parent: Law) =>
      parent.lawType === undefined ? null : parent.lawType,
    linkedAt: (parent: Law) =>
      parent.linkedAt === undefined ? null : parent.linkedAt,
    ministry: (parent: Law) =>
      parent.ministry === undefined ? null : parent.ministry,
    permalink: (parent: Law) =>
      parent.permalink === undefined ? null : parent.permalink,
    publicationDate: (parent: Law) =>
      parent.publicationDate === undefined ? null : parent.publicationDate,
    published: (parent: Law) => parent.published,
    scrapedAt: (parent: Law) =>
      parent.scrapedAt === undefined ? null : parent.scrapedAt,
    shortName: (parent: Law) => parent.shortName,
    slug: (parent: Law) => parent.slug,
    title: (parent: Law) => parent.title,
    uid: (parent: Law) => parent.uid,
    updatedAt: (parent: Law) => parent.updatedAt,
    url: (parent: Law) => parent.url
  };

  export interface LawWhereInput {
    altTitle: string | null;
    altTitle_not: string | null;
    altTitle_in: string[];
    altTitle_not_in: string[];
    altTitle_lt: string | null;
    altTitle_lte: string | null;
    altTitle_gt: string | null;
    altTitle_gte: string | null;
    altTitle_contains: string | null;
    altTitle_not_contains: string | null;
    altTitle_starts_with: string | null;
    altTitle_not_starts_with: string | null;
    altTitle_ends_with: string | null;
    altTitle_not_ends_with: string | null;
    altSlug: string | null;
    altSlug_not: string | null;
    altSlug_in: string[];
    altSlug_not_in: string[];
    altSlug_lt: string | null;
    altSlug_lte: string | null;
    altSlug_gt: string | null;
    altSlug_gte: string | null;
    altSlug_contains: string | null;
    altSlug_not_contains: string | null;
    altSlug_starts_with: string | null;
    altSlug_not_starts_with: string | null;
    altSlug_ends_with: string | null;
    altSlug_not_ends_with: string | null;
    createdAt: string | null;
    createdAt_not: string | null;
    createdAt_in: string[];
    createdAt_not_in: string[];
    createdAt_lt: string | null;
    createdAt_lte: string | null;
    createdAt_gt: string | null;
    createdAt_gte: string | null;
    historic: boolean | null;
    historic_not: boolean | null;
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    indexedAt: string | null;
    indexedAt_not: string | null;
    indexedAt_in: string[];
    indexedAt_not_in: string[];
    indexedAt_lt: string | null;
    indexedAt_lte: string | null;
    indexedAt_gt: string | null;
    indexedAt_gte: string | null;
    isSearchable: boolean | null;
    isSearchable_not: boolean | null;
    justiceSystem: JusticeSystemEnum | null;
    justiceSystem_not: JusticeSystemEnum | null;
    justiceSystem_in: JusticeSystemEnum[];
    justiceSystem_not_in: JusticeSystemEnum[];
    language: LanguageEnum | null;
    language_not: LanguageEnum | null;
    language_in: LanguageEnum[];
    language_not_in: LanguageEnum[];
    lawBasedOnLaw_every: LawWhereInput | null;
    lawBasedOnLaw_some: LawWhereInput | null;
    lawBasedOnLaw_none: LawWhereInput | null;
    lawIsBaseForLaw_every: LawWhereInput | null;
    lawIsBaseForLaw_some: LawWhereInput | null;
    lawIsBaseForLaw_none: LawWhereInput | null;
    lawType: LawType | null;
    lawType_not: LawType | null;
    lawType_in: LawType[];
    lawType_not_in: LawType[];
    linkedAt: string | null;
    linkedAt_not: string | null;
    linkedAt_in: string[];
    linkedAt_not_in: string[];
    linkedAt_lt: string | null;
    linkedAt_lte: string | null;
    linkedAt_gt: string | null;
    linkedAt_gte: string | null;
    ministry: string | null;
    ministry_not: string | null;
    ministry_in: string[];
    ministry_not_in: string[];
    ministry_lt: string | null;
    ministry_lte: string | null;
    ministry_gt: string | null;
    ministry_gte: string | null;
    ministry_contains: string | null;
    ministry_not_contains: string | null;
    ministry_starts_with: string | null;
    ministry_not_starts_with: string | null;
    ministry_ends_with: string | null;
    ministry_not_ends_with: string | null;
    permalink: string | null;
    permalink_not: string | null;
    permalink_in: string[];
    permalink_not_in: string[];
    permalink_lt: string | null;
    permalink_lte: string | null;
    permalink_gt: string | null;
    permalink_gte: string | null;
    permalink_contains: string | null;
    permalink_not_contains: string | null;
    permalink_starts_with: string | null;
    permalink_not_starts_with: string | null;
    permalink_ends_with: string | null;
    permalink_not_ends_with: string | null;
    publicationDate: string | null;
    publicationDate_not: string | null;
    publicationDate_in: string[];
    publicationDate_not_in: string[];
    publicationDate_lt: string | null;
    publicationDate_lte: string | null;
    publicationDate_gt: string | null;
    publicationDate_gte: string | null;
    published: boolean | null;
    published_not: boolean | null;
    scrapedAt: string | null;
    scrapedAt_not: string | null;
    scrapedAt_in: string[];
    scrapedAt_not_in: string[];
    scrapedAt_lt: string | null;
    scrapedAt_lte: string | null;
    scrapedAt_gt: string | null;
    scrapedAt_gte: string | null;
    shortName: string | null;
    shortName_not: string | null;
    shortName_in: string[];
    shortName_not_in: string[];
    shortName_lt: string | null;
    shortName_lte: string | null;
    shortName_gt: string | null;
    shortName_gte: string | null;
    shortName_contains: string | null;
    shortName_not_contains: string | null;
    shortName_starts_with: string | null;
    shortName_not_starts_with: string | null;
    shortName_ends_with: string | null;
    shortName_not_ends_with: string | null;
    slug: string | null;
    slug_not: string | null;
    slug_in: string[];
    slug_not_in: string[];
    slug_lt: string | null;
    slug_lte: string | null;
    slug_gt: string | null;
    slug_gte: string | null;
    slug_contains: string | null;
    slug_not_contains: string | null;
    slug_starts_with: string | null;
    slug_not_starts_with: string | null;
    slug_ends_with: string | null;
    slug_not_ends_with: string | null;
    title: string | null;
    title_not: string | null;
    title_in: string[];
    title_not_in: string[];
    title_lt: string | null;
    title_lte: string | null;
    title_gt: string | null;
    title_gte: string | null;
    title_contains: string | null;
    title_not_contains: string | null;
    title_starts_with: string | null;
    title_not_starts_with: string | null;
    title_ends_with: string | null;
    title_not_ends_with: string | null;
    uid: string | null;
    uid_not: string | null;
    uid_in: string[];
    uid_not_in: string[];
    uid_lt: string | null;
    uid_lte: string | null;
    uid_gt: string | null;
    uid_gte: string | null;
    uid_contains: string | null;
    uid_not_contains: string | null;
    uid_starts_with: string | null;
    uid_not_starts_with: string | null;
    uid_ends_with: string | null;
    uid_not_ends_with: string | null;
    updatedAt: string | null;
    updatedAt_not: string | null;
    updatedAt_in: string[];
    updatedAt_not_in: string[];
    updatedAt_lt: string | null;
    updatedAt_lte: string | null;
    updatedAt_gt: string | null;
    updatedAt_gte: string | null;
    url: string | null;
    url_not: string | null;
    url_in: string[];
    url_not_in: string[];
    url_lt: string | null;
    url_lte: string | null;
    url_gt: string | null;
    url_gte: string | null;
    url_contains: string | null;
    url_not_contains: string | null;
    url_starts_with: string | null;
    url_not_starts_with: string | null;
    url_ends_with: string | null;
    url_not_ends_with: string | null;
    AND: LawWhereInput[];
    OR: LawWhereInput[];
    NOT: LawWhereInput[];
  }

  export interface ArgsLawBasedOnLaw {
    where: LawWhereInput | null;
    orderBy: LawOrderByInput | null;
    skip: number | null;
    after: string | null;
    before: string | null;
    first: number | null;
    last: number | null;
  }

  export interface ArgsLawIsBaseForLaw {
    where: LawWhereInput | null;
    orderBy: LawOrderByInput | null;
    skip: number | null;
    after: string | null;
    before: string | null;
    first: number | null;
    last: number | null;
  }

  export type AltTitleResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type AltSlugResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type CreatedAtResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type HistoricResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type IdResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type IndexedAtResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type IsSearchableResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type JusticeSystemResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => JusticeSystemEnum | Promise<JusticeSystemEnum>;

  export type LanguageResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => LanguageEnum | Promise<LanguageEnum>;

  export type LawBasedOnLawResolver = (
    parent: Law,
    args: ArgsLawBasedOnLaw,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Law[] | Promise<Law[]>;

  export type LawIsBaseForLawResolver = (
    parent: Law,
    args: ArgsLawIsBaseForLaw,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Law[] | Promise<Law[]>;

  export type LawTypeResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => LawType | null | Promise<LawType | null>;

  export type LinkedAtResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type MinistryResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type PermalinkResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type PublicationDateResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type PublishedResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type ScrapedAtResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type ShortNameResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type SlugResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TitleResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UidResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UrlResolver = (
    parent: Law,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    altTitle: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    altSlug: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    createdAt: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    historic: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    id: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    indexedAt: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    isSearchable: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    justiceSystem: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => JusticeSystemEnum | Promise<JusticeSystemEnum>;

    language: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => LanguageEnum | Promise<LanguageEnum>;

    lawBasedOnLaw: (
      parent: Law,
      args: ArgsLawBasedOnLaw,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Law[] | Promise<Law[]>;

    lawIsBaseForLaw: (
      parent: Law,
      args: ArgsLawIsBaseForLaw,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Law[] | Promise<Law[]>;

    lawType: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => LawType | null | Promise<LawType | null>;

    linkedAt: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    ministry: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    permalink: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    publicationDate: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    published: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    scrapedAt: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    shortName: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    slug: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    title: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    uid: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    url: (
      parent: Law,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Law: LawResolvers.Type;
}
